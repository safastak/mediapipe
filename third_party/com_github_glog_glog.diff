diff --git a/bazel/glog.bzl b/bazel/glog.bzl
index dacd934..d7b3d78 100644
--- a/bazel/glog.bzl
+++ b/bazel/glog.bzl
@@ -56,6 +56,7 @@
         "-DGLOG_BAZEL_BUILD",
         # Inject a C++ namespace.
         "-DGOOGLE_NAMESPACE='%s'" % namespace,
+        "-D_START_GOOGLE_NAMESPACE_='%s'" % namespace,
         "-DHAVE_CXX11_NULLPTR_T",
         "-DHAVE_STDINT_H",
         "-DHAVE_STRING_H",
@@ -226,7 +227,7 @@
         "@ac_cv_have_inttypes_h@": "0",
         "@ac_cv_have_u_int16_t@": "0",
         "@ac_cv_have_glog_export@": "0",
-        "@ac_google_start_namespace@": "namespace google {",
+        "@ac_google_start_namespace@": "namespace %s {" % namespace,
         "@ac_google_end_namespace@": "}",
-        "@ac_google_namespace@": "google",
+        "@ac_google_namespace@": "%s" % namespace,
     }
diff --git a/src/glog/logging.h.in b/src/glog/logging.h.in
index 4028ccc..483e639 100644
--- a/src/glog/logging.h.in
+++ b/src/glog/logging.h.in
@@ -753,7 +753,7 @@
 // This declaration will allow use to use CHECK macros for user
 // defined classes which have operator<< (e.g., stl_logging.h).
 inline std::ostream& operator<<(
-    std::ostream& out, const google::DummyClassToDefineOperator&) {
+    std::ostream& out, const @ac_google_namespace@::DummyClassToDefineOperator&) {
   return out;
 }
 
diff --git a/src/logging.cc b/src/logging.cc
index 4028ccc..483e639 100644
--- a/src/logging.cc
+++ b/src/logging.cc
@@ -1743,6 +1743,23 @@ ostream& LogMessage::stream() {
   return data_->stream_;
 }

+namespace {
+#if defined(__ANDROID__)
+int AndroidLogLevel(const int severity) {
+  switch (severity) {
+    case 3:
+      return ANDROID_LOG_FATAL;
+    case 2:
+      return ANDROID_LOG_ERROR;
+    case 1:
+      return ANDROID_LOG_WARN;
+    default:
+      return ANDROID_LOG_INFO;
+  }
+}
+#endif  // defined(__ANDROID__)
+}  // namespace
+
 // Flush buffered message, called by the destructor, or any other function
 // that needs to synchronize the log.
 void LogMessage::Flush() {
@@ -1779,6 +1796,12 @@ void LogMessage::Flush() {
   }
   LogDestination::WaitForSinks(data_);

+#if defined(__ANDROID__)
+  const int level = AndroidLogLevel((int)data_->severity_);
+  const std::string text = std::string(data_->message_text_);
+  __android_log_write(level, "native", text.substr(0,data_->num_chars_to_log_).c_str());
+#endif  // defined(__ANDROID__)
+
   if (append_newline) {
     // Fix the ostrstream back how it was before we screwed with it.
     // It's 99.44% certain that we don't need to worry about doing this.
